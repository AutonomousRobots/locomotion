#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'pwm17', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM17_'.
 * The prefix is the slave descriptor.
 */
#define PWM17_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM17_COMPONENT_NAME pwm17
#define PWM17_BASE 0x0
#define PWM17_SPAN 16
#define PWM17_END 0xf

/*
 * Macros for device 'pwm16', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM16_'.
 * The prefix is the slave descriptor.
 */
#define PWM16_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM16_COMPONENT_NAME pwm16
#define PWM16_BASE 0x10
#define PWM16_SPAN 16
#define PWM16_END 0x1f

/*
 * Macros for device 'pwm15', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM15_'.
 * The prefix is the slave descriptor.
 */
#define PWM15_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM15_COMPONENT_NAME pwm15
#define PWM15_BASE 0x20
#define PWM15_SPAN 16
#define PWM15_END 0x2f

/*
 * Macros for device 'pwm14', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM14_'.
 * The prefix is the slave descriptor.
 */
#define PWM14_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM14_COMPONENT_NAME pwm14
#define PWM14_BASE 0x30
#define PWM14_SPAN 16
#define PWM14_END 0x3f

/*
 * Macros for device 'pwm13', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM13_'.
 * The prefix is the slave descriptor.
 */
#define PWM13_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM13_COMPONENT_NAME pwm13
#define PWM13_BASE 0x40
#define PWM13_SPAN 16
#define PWM13_END 0x4f

/*
 * Macros for device 'pwm12', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM12_'.
 * The prefix is the slave descriptor.
 */
#define PWM12_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM12_COMPONENT_NAME pwm12
#define PWM12_BASE 0x50
#define PWM12_SPAN 16
#define PWM12_END 0x5f

/*
 * Macros for device 'pwm11', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM11_'.
 * The prefix is the slave descriptor.
 */
#define PWM11_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM11_COMPONENT_NAME pwm11
#define PWM11_BASE 0x60
#define PWM11_SPAN 16
#define PWM11_END 0x6f

/*
 * Macros for device 'pwm10', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM10_'.
 * The prefix is the slave descriptor.
 */
#define PWM10_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM10_COMPONENT_NAME pwm10
#define PWM10_BASE 0x70
#define PWM10_SPAN 16
#define PWM10_END 0x7f

/*
 * Macros for device 'pwm9', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM9_'.
 * The prefix is the slave descriptor.
 */
#define PWM9_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM9_COMPONENT_NAME pwm9
#define PWM9_BASE 0x80
#define PWM9_SPAN 16
#define PWM9_END 0x8f

/*
 * Macros for device 'pwm8', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM8_'.
 * The prefix is the slave descriptor.
 */
#define PWM8_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM8_COMPONENT_NAME pwm8
#define PWM8_BASE 0x90
#define PWM8_SPAN 16
#define PWM8_END 0x9f

/*
 * Macros for device 'pwm7', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM7_'.
 * The prefix is the slave descriptor.
 */
#define PWM7_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM7_COMPONENT_NAME pwm7
#define PWM7_BASE 0xa0
#define PWM7_SPAN 16
#define PWM7_END 0xaf

/*
 * Macros for device 'pwm6', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM6_'.
 * The prefix is the slave descriptor.
 */
#define PWM6_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM6_COMPONENT_NAME pwm6
#define PWM6_BASE 0xb0
#define PWM6_SPAN 16
#define PWM6_END 0xbf

/*
 * Macros for device 'pwm5', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM5_'.
 * The prefix is the slave descriptor.
 */
#define PWM5_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM5_COMPONENT_NAME pwm5
#define PWM5_BASE 0xc0
#define PWM5_SPAN 16
#define PWM5_END 0xcf

/*
 * Macros for device 'pwm4', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM4_'.
 * The prefix is the slave descriptor.
 */
#define PWM4_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM4_COMPONENT_NAME pwm4
#define PWM4_BASE 0xd0
#define PWM4_SPAN 16
#define PWM4_END 0xdf

/*
 * Macros for device 'pwm3', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM3_'.
 * The prefix is the slave descriptor.
 */
#define PWM3_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM3_COMPONENT_NAME pwm3
#define PWM3_BASE 0xe0
#define PWM3_SPAN 16
#define PWM3_END 0xef

/*
 * Macros for device 'pwm2', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM2_'.
 * The prefix is the slave descriptor.
 */
#define PWM2_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM2_COMPONENT_NAME pwm2
#define PWM2_BASE 0xf0
#define PWM2_SPAN 16
#define PWM2_END 0xff

/*
 * Macros for device 'pwm1', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM1_'.
 * The prefix is the slave descriptor.
 */
#define PWM1_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM1_COMPONENT_NAME pwm1
#define PWM1_BASE 0x100
#define PWM1_SPAN 16
#define PWM1_END 0x10f

/*
 * Macros for device 'pwm0', class 'TERASIC_PWM_EX'
 * The macros are prefixed with 'PWM0_'.
 * The prefix is the slave descriptor.
 */
#define PWM0_COMPONENT_TYPE TERASIC_PWM_EX
#define PWM0_COMPONENT_NAME pwm0
#define PWM0_BASE 0x110
#define PWM0_SPAN 16
#define PWM0_END 0x11f

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x120
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x12f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x130
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x13f
#define DIPSW_PIO_IRQ 2
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x140
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x14f
#define BUTTON_PIO_IRQ 0
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x150
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x157
#define JTAG_UART_IRQ 1
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x158
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x15f
#define SYSID_QSYS_ID 0
#define SYSID_QSYS_TIMESTAMP 1510433016

/*
 * Macros for device 'adc_0', class 'altera_up_avalon_adc'
 * The macros are prefixed with 'ADC_0_'.
 * The prefix is the slave descriptor.
 */
#define ADC_0_COMPONENT_TYPE altera_up_avalon_adc
#define ADC_0_COMPONENT_NAME adc_0
#define ADC_0_BASE 0x160
#define ADC_0_SPAN 32
#define ADC_0_END 0x17f


#endif /* _ALTERA_HPS_0_H_ */
